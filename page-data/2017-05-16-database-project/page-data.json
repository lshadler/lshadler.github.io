{"componentChunkName":"component---src-templates-post-tsx","path":"/2017-05-16-database-project/","webpackCompilationHash":"d17ef33ab51981bee811","result":{"data":{"site":{"siteMetadata":{"title":"lshadler.github.io","description":"A personal website for Lucas Shadler","author":{"name":"Lucas Shadler","url":"https://github.intuit.com/lshadler"}}},"markdownRemark":{"html":"<p>Through my last semester at RIT, I encountered my first long-term team-based coding project.\nAlthough my skills at writing algorithms and solutions were strong by this point, my team\nquickly introduced me to my short-comings as a developer and provided me ways of improving.</p>\n<p>We were tasked with developing the backend and frontend for a Java application that utilized\nany database (the course was in database management). I grouped up with a set of distinguished\nstudents in the interests of not only gaining a good grade, but more importantly making the most\nof this new experience. Coming from a background in Physics, I have a strong grasp in problem\nsolving, but lack experience in enterprise development.</p>\n<p>We chose to write our frontend in Javascript, using Bootstrap for our themes and the React\nframework to create a responsive user experience. Our backend was written in Java and SQL, using mostly\nthe basic utilities of the native Java release. To allow communication between the frontend and backend\n, we used a framework called Dropwizard. The entire code base was wrapped in Gradle, a tool used to allow\nfor quick and smooth building and deploying for an appllication.</p>\n<p>As you might expect, this dichotomy of frameworks became quickly overwhelming for me, so at first I\njust buried my head into the Java development. This was easy because from the course, I knew how the database\nworked and how to create Data Access Objects (DAO) in Java. After one look at my code, however, my partners\nindicated that half of my text could be replaced by annotations!</p>\n<p>To me it felt like I was barely doing any coding, and thus hurting the team effort. So I poured my soul into\nthe test framework. I did all the research I could to find good testing platforms, and found one in JUnit 5.\nLooking up everything I could, I developed as many tests on the database as I could figure out how to.\nTo test the effectiveness of my tests, I looked up information on code coverage, and using the built-in\nIntellij Code Coverage framework, I was able to develop tests that covered the whole backend. Along the way,\nI discovered several bugs that critically affected the project, which was a testament to the need for testing.</p>\n<p>One thing I didn’t realize immediately was how quickly I came to adopt framework knowledge through experience.\nAt face value, working in new frameworks can be quite daunting, as I experienced with React, Gradle, and\nDropwizard. But if you put in the time to really work with these frameworks, and work them into your own projects,\nthey really just exist for the benefit of the developer. I learned this through our simple database project, and\nit is a skill/lesson that I will take through my development career.</p>\n<p>Pollaroid, the project that I helped develop, is available on <a href=\"https://github.com/harlanhaskins/Pollaroid\">Github</a>.</p>","excerpt":"Through my last semester at RIT, I encountered my first long-term team-based coding project.\nAlthough my skills at writing algorithms and…","frontmatter":{"title":"My Database Project"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2017-05-16-database-project/"}}}